{"version":3,"file":"bs-custom-file-input.min.js","sources":["../src/polyfill.js","../src/selector.js","../src/util.js","../src/eventHandlers.js","../src/index.js"],"sourcesContent":["(function () {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector\n  }\n})()\n","const Selector = {\n  CUSTOMFILE: '.custom-file input[type=\"file\"]',\n  CUSTOMFILELABEL: '.custom-file-label',\n  FORM: 'form',\n}\n\nexport default Selector\n","import Selector from './selector'\n\nconst getDefaultText = (input) => {\n  let defaultText = ''\n\n  const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    defaultText = label.innerHTML\n  }\n\n  return defaultText\n}\n\nconst restoreDefaultText = (input) => {\n  const defaultText = input.bsCustomFileInput.defaultText\n  const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    label.innerHTML = defaultText\n  }\n}\n\nconst customProperty = 'bsCustomFileInput'\n\nexport {\n  getDefaultText,\n  restoreDefaultText,\n  customProperty,\n}\n","import {customProperty, getDefaultText, restoreDefaultText} from './util'\nimport Selector from './selector'\n\nconst fileApi = !!window.File\n\n\n\nconst getSelectedFiles = (input) => {\n  if (input.hasAttribute('multiple') && fileApi) {\n    const files = [].slice.call(input.files)\n      .map((file) => file.name)\n\n    return files.join(', ')\n  } else {\n    return input.value\n  }\n}\n\nfunction handleInputChange(e) {\n  const input = e.target\n  if(input && input.matches(Selector.CUSTOMFILE)) {\n    if (!input.hasOwnProperty(customProperty)) {\n      Object.defineProperty(input, customProperty, {\n        value: {\n          defaultText: getDefaultText(input),\n        },\n        writable: true,\n      })\n    }\n    const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n    if (label) {\n      label.innerHTML = getSelectedFiles(input)\n    }\n  }\n}\n\nfunction handleFormReset() {\n  const customFileList = [].slice.call(this.querySelectorAll(Selector.CUSTOMFILE))\n\n  for (let i = 0, len = customFileList.length; i < len; i++) {\n    restoreDefaultText(customFileList[i])\n  }\n}\n\nexport {\n  handleInputChange,\n  handleFormReset,\n}\n","import './polyfill'\nimport {customProperty, restoreDefaultText} from './util'\nimport {\n  handleFormReset,\n  handleInputChange,\n} from './eventHandlers'\nimport Selector from './selector'\n\nconst Event = {\n  FORMRESET     : 'reset',\n  INPUTCHANGE   : 'change',\n  INPUTFOCUSIN  : 'focusin',\n  INPUTFOCUSOUT : 'focusout',\n}\n\nconst bsCustomFileInput = {\n  init(inputSelector = Selector.CUSTOMFILE, formSelector = Selector.FORM) {\n    Selector.CUSTOMFILE = inputSelector\n    Selector.FORM = formSelector\n    document.addEventListener(Event.INPUTCHANGE,handleInputChange)\n\n    const formList = [].slice.call(document.querySelectorAll(Selector.FORM))\n\n    for (let i = 0, len = formList.length; i < len; i++) {\n      formList[i].addEventListener(Event.FORMRESET, handleFormReset)\n    }\n  },\n\n  destroy() {\n    const formList = [].slice.call(document.querySelectorAll(Selector.FORM))\n    const customFileInputList = [].slice.call(document.querySelectorAll(Selector.CUSTOMFILE))\n      .filter((input) => !!input.bsCustomFileInput)\n\n    for (let i = 0, len = customFileInputList.length; i < len; i++) {\n      const input = customFileInputList[i]\n\n      restoreDefaultText(input)\n      input[customProperty] = undefined\n\n      document.removeEventListener(Event.INPUTCHANGE, handleInputChange)\n    }\n\n    for (let i = 0, len = formList.length; i < len; i++) {\n      formList[i].removeEventListener(Event.FORMRESET, handleFormReset)\n    }\n  },\n}\n\nexport default bsCustomFileInput\n"],"names":["Element","prototype","matches","msMatchesSelector","Selector","CUSTOMFILE","CUSTOMFILELABEL","FORM","restoreDefaultText","input","defaultText","bsCustomFileInput","label","parentNode","querySelector","innerHTML","customProperty","fileApi","window","File","handleInputChange","e","target","hasOwnProperty","Object","defineProperty","value","writable","hasAttribute","slice","call","files","map","file","name","join","handleFormReset","customFileList","this","querySelectorAll","i","len","length","Event","init","inputSelector","formSelector","document","addEventListener","formList","destroy","customFileInputList","filter","undefined","removeEventListener"],"mappings":";;;;;6LACOA,QAAQC,UAAUC,UACrBF,QAAQC,UAAUC,QAAUF,QAAQC,UAAUE,mBCFlD,IAAMC,EAAW,CACfC,WAAY,kCACZC,gBAAiB,qBACjBC,KAAM,QCWFC,EAAqB,SAACC,OACpBC,EAAcD,EAAME,kBAAkBD,YACtCE,EAAQH,EAAMI,WAAWC,cAAcV,EAASE,iBAElDM,IACFA,EAAMG,UAAYL,IAIhBM,EAAiB,oBCpBjBC,IAAYC,OAAOC,KAezB,SAASC,EAAkBC,OAXDZ,EDLFA,EAClBC,EAEEE,ECcAH,EAAQY,EAAEC,UACbb,GAASA,EAAMP,QAAQE,EAASC,YAAa,CACzCI,EAAMc,eAAeP,IACxBQ,OAAOC,eAAehB,EAAOO,EAAgB,CAC3CU,MAAO,CACLhB,aDtBcD,ECsBcA,EDrBhCC,EAAc,GAEZE,EAAQH,EAAMI,WAAWC,cAAcV,EAASE,iBAElDM,IACFF,EAAcE,EAAMG,WAGfL,ICeDiB,UAAU,QAGRf,EAAQH,EAAMI,WAAWC,cAAcV,EAASE,iBAElDM,IACFA,EAAMG,WAzBcN,EAyBeA,GAxB7BmB,aAAa,aAAeX,EACtB,GAAGY,MAAMC,KAAKrB,EAAMsB,OAC/BC,IAAI,SAACC,UAASA,EAAKC,OAETC,KAAK,MAEX1B,EAAMiB,QAuBjB,SAASU,YACDC,EAAiB,GAAGR,MAAMC,KAAKQ,KAAKC,iBAAiBnC,EAASC,aAE3DmC,EAAI,EAAGC,EAAMJ,EAAeK,OAAQF,EAAIC,EAAKD,IACpDhC,EAAmB6B,EAAeG,ICjCtC,IAAMG,EACY,QADZA,EAEY,eAKQ,CACxBC,cAAKC,EAAqCC,YAArCD,IAAAA,EAAgBzC,EAASC,qBAAYyC,IAAAA,EAAe1C,EAASG,MAChEH,EAASC,WAAawC,EACtBzC,EAASG,KAAOuC,EAChBC,SAASC,iBAAiBL,EAAkBvB,WAEtC6B,EAAW,GAAGpB,MAAMC,KAAKiB,SAASR,iBAAiBnC,EAASG,OAEzDiC,EAAI,EAAGC,EAAMQ,EAASP,OAAQF,EAAIC,EAAKD,IAC9CS,EAAST,GAAGQ,iBAAiBL,EAAiBP,IAIlDc,2BACQD,EAAW,GAAGpB,MAAMC,KAAKiB,SAASR,iBAAiBnC,EAASG,OAC5D4C,EAAsB,GAAGtB,MAAMC,KAAKiB,SAASR,iBAAiBnC,EAASC,aAC1E+C,OAAO,SAAC3C,WAAYA,EAAME,oBAEpB6B,EAAI,EAAGC,EAAMU,EAAoBT,OAAQF,EAAIC,EAAKD,IAAK,KACxD/B,EAAQ0C,EAAoBX,GAElChC,EAAmBC,GACnBA,EAAMO,QAAkBqC,EAExBN,SAASO,oBAAoBX,EAAmBvB,OAG7C,IAAIoB,EAAI,EAAGC,EAAMQ,EAASP,OAAQF,EAAIC,EAAKD,IAC9CS,EAAST,GAAGc,oBAAoBX,EAAiBP"}